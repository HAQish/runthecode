[
  {
    "submittedSolutions": [],
    "challengeName": "['myChallenge should be a function', 'myChallenge should return hello']",
    "prompt": "write a function, myChallenge, that returns 'hello'",
    "starterCode": "var myChallenge = function() {\n  return '_____';\n};",
    "masterSolution": "var myChallenge = function() {\n  return 'hello'\n};",
    "masterTests": "[typeof myChallenge === 'function', myChallenge() === 'hello']",
    "testDescriptions": "['myChallenge should be a function', 'myChallenge should return hello']",
    "challengeLevel": "4",
    "createdBy": "testerrz"
  },
  {
    "submittedSolutions": [],
    "challengeName": "Find the unique number",
    "prompt": "There is an array with some numbers. All numbers are equal except for one. Try to find it!\n\nfindUniq([ 1, 1, 1, 2, 1, 1 ]) === 2\nfindUniq([ 0, 0, 0.55, 0, 0 ]) === 0.55\n\nIt\u2019s guaranteed that array contains more than 3 numbers.",
    "starterCode": "var findUniq = function(arr) {\n    \n};",
    "masterSolution": "var findUniq = function (arr) {\n  arr.sort((a,b)=>a-b);\n  return arr[0]==arr[1]?arr.pop():arr[0]\n};",
    "masterTests": "[typeof findUniq === 'function', findUniq([ 1, 1, 1, 2, 1, 1 ]) === 2, findUniq([ 0, 0, 0.55, 0, 0 ]) === 0.55]",
    "testDescriptions": "['findUniq should be a function', 'findUniq should return 2', 'findUniq should return 0.55']",
    "challengeLevel": "4",
    "createdBy": "codingchartreuse"
  },
  {
    "submittedSolutions": [],
    "challengeName": "rot13",
    "prompt": "There is a basic cipher commonly used to obfuscate jokes.  It is called ROT13 and you can find the details about the cipher here: http://en.wikipedia.org/wiki/ROT13.  \n\nYour task is to create a function that accepts a single string as a parameter, applies the ROT13 cipher and then returns the new string. It should be noted that you are only substituting characters.  \n\nI have listed an example below: \n\nrot13('EBG13 rknzcyr.') // => 'ROT13 example'\n ",
    "starterCode": "const rot13 = (string) => {\n    let newString = '';\n    // Make sure that you return a string\n    // Your code\n    return newString;\n};",
    "masterSolution": "const rot13 = (string) => {\n  const key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  const key2 = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm';\n  let result = '';\n  for (const letter of string) {\n    result += key2[key.indexOf(letter)] || letter;\n  }\n  return result;\n};",
    "masterTests": "[rot13('Guvf vf na rapbqrq erfhyg') === 'This is an encoded result', rot13('This is an encoded result') === 'Guvf vf na rapbqrq erfhyg', rot13('Ubj ner lbh qbvat gbqnl? Qb lbh unir cynaf nsgre fpubby?') === 'How are you doing today? Do you have plans after school?', rot13('How are you doing today? Do you have plans after school?') === 'Ubj ner lbh qbvat gbqnl? Qb lbh unir cynaf nsgre fpubby?']",
    "testDescriptions": "['Decodes a message', 'Encodes a message', 'Decodes a longer message', 'Encodes a longer message']",
    "challengeLevel": "6",
    "createdBy": "JH108"
  },
  {
    "prompt": "JavaScript can define a variable using the 'var' keyword.  '=' assigns a value, '==' and '===' asserts equality between values.  Check out the examples and then fill in the blanks.",
    "starterCode": "// examples: \n var aNumber = 3;  // typeof aNumber === 'number' \n var aString = 'I am learning JavaScript!';  // typeof aString = 'string' \n var aBoolean = true;  // typeof aBoolean === 'boolean' \n // the typeof operator returns a string indicating the data type \n \n // Fill in the blanks/Fix errors in code \n ___ myNumber = 4; \n ___ myBoolean = 'true'; // typeof myBoolean should equal 'boolean' \n  \n // Advanced \n // What would the result of this be? \n // typeof(typeof myNumber); \n var myAnswer = '_____';",
    "masterTests": "[typeof myNumber === 'number', typeof myBoolean === 'boolean', myAnswer === 'string']",
    "masterTestDescriptions": "['myNumber should be a number', 'myBoolean should be a boolean', 'myAnswer should be string']",
    "challengeLevel": 1,
    "challengeName": "Variables",
    "createdBy": "kevin"
  },
  {
    "prompt": "An array is a data structure that can hold multiple elements.  Take a look at the examples and then complete the exercise.",
    "starterCode": "// examples: \n var numbersArray = [1, 3, 2, 5];  // assigns the variable 'numbersArray' to be [4,5,6,7] \n // Elements within an array can be accessed by index... \n numbersArray[0]; // returns '4' -- Array indexes start at 0 \n numbersArray[2]; // returns '6' \n numbersArray[5]; // returns 'undefined' \n \n // Exercise: \n // create an array where the 0 index is a value greater than the last index \n \n var myArray =  \n \n // assign myLastIndex to the value of the last index in myArray \n var myLastIndex = myArray[FILL_ME_IN]; \n // Advanced \n // create an Array that contains each primitive data type \n var myMixedArray =  \n",
    "masterTests": "[myArray.length > 1, myArray[0] > myArray[myArray.length-1], myLastIndex === myArray[myArray.length-1], ((myMixedArray) => {let types = []; for (var i = 0; i < myMixedArray.length; i++) { let type = typeof myMixedArray[i]; types.push(type);} return (types.includes('string') && types.includes('boolean') && types.includes('number') && types.includes('object') && types.includes('undefined'))? true: false;})()]",
    "masterTestDescriptions": "['myArray should have a length greater than 1', 'myArray[0] should be greater than the last index of myArray', 'myLastIndex should be the value of the last index in myArray', 'myMixedArray should include all primitive data types (string, number, boolean, null, undefined)']",
    "challengeLevel": 1,
    "challengeName": "Arrays",
    "createdBy": "kevin"
  },
  {
    "prompt": "An object is a collection of properties.  A property is an association between a key and a value.  Look at the examples and then complete the exercise.",
    "starterCode": "// examples: \n var blackCat = { \n  name: 'Tom',\n  color: 'black',\n  speed: 5\n}; \nblackCat.color === 'black'; // true \n blackCat.name === 'Tom'; // true\n blackCat.speed = 8; \n blackCat.speed === 5; // false \n blackCat.speed === 8; // true \n \n // Exercise: create a brownDog named Cookie that moves faster than blackCat \n var brownDog = ",
    "masterTests": "[brownDog.color === 'brown', brownDog.speed > blackCat.speed, brownDog.name === 'Cookie']",
    "masterTestDescriptions": "['brownDog should be brown', 'brownDog should be faster than blackCat', 'brownDog should be named Cookie']",
    "challengeLevel": 2,
    "challengeName": "Objects",
    "createdBy": "kyle"
  },
  {
    "prompt": "Simply put, a function is a block of code that performs a task.  A function is executed when it is invoked.  Look at the examples and then complete the exercise.",
    "starterCode": "// examples with definitions: \n function name(parameter1, parameter2) { \n  return parameter1 + parameter2; \n};\n var result = name(2,3); // result === 5 \n \n // realistic example: \n function multiplyNumbers(num1, num2) { \n return num1 * num2; \n }; \n var multipliedNumbers = multiplyNumbers(3,5); // multipliedNumbers === 15 \n \n // Exercise: create a function that takes in a temperature in Fahrenheit and converts it to Celsius \n function toCelsius() { \n \n };",
    "masterTests": "[typeof toCelsius === 'function', (toCelsius(77) === 25 && toCelsius(54.5) === 12.5)]",
    "masterTestDescriptions": "['toCelsius should be a function', 'toCelsius should convert a given fahrenheit to celsius']",
    "challengeLevel": 2,
    "challengeName": "Functions",
    "createdBy": "kyle"
  },
  {
    "prompt": "Conditional Statements perform different actions based on different conditions.  Review the examples and then complete the exercises.",
    "starterCode": "// examples with definitions: \n if (condition) { \n  // this code will run if condition evaluated to true \n }; \n // realistic example: \n var myAge = 21; \n var oldEnoughToDrink = false; \n if (myAge >= 21) { \n oldEnoughToDrink = true; \n }; \n \n Exercise: create a function that returns a users skill level('beginner'/'intermediate'), given hours dedicated \n function getSkillLevel(hours) { \n \n };",
    "masterTests": "[typeof getSkillLevel === 'function', getSkillLevel(1) === 'beginner', getSkillLevel(41) === 'intermediate']",
    "masterTestDescriptions": "['getSkillLevel should be a function', 'getSkillLevel should return beginner, if they have only invested 1 hour', 'getSkillLevel should return intermediate if they have invested over 40 hours']",
    "challengeLevel": 3,
    "challengeName": "Conditional Statement - 'if'",
    "createdBy": "habib"
  },
  {
    "prompt": "Loops can be used to run the same code over and over again with different values.  Review the example and then complete the exercises.",
    "starterCode": "// example: \n var exampleResult = 0; \n for (var i = 0; i < 4; i++) { \n exampleResult = exampleResult + i; \n } \n // what will exampleResult be after the loop? Answer is at the bottom. \n \n Exercise: create function using a for loop that returns a string containing even numbers from 0-n, including n \n // getEvenNumbers(6) should return '246' \n \n function getEvenNumbers(n) { \n \n }; \n \n \n // exampleResult === 6",
    "masterTests": "[typeof getEvenNumbers === 'function', let test8 = getEvenNumbers(8); test8[3] === 8, let test15 = getEvenNumbers(15); test15.length === 7",
    "masterTestDescriptions": "['getEvenNumbers should be a function', 'getEvenNumbers should return an array of even numbers, including n', getEvenNumbers(15) should have a length of 7]",
    "challengeLevel": 3,
    "challengeName": "Loops - 'for'",
    "createdBy": "habib"
  }
]